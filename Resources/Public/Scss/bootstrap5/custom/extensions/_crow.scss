// cRow padding
$crow-inner-spacing: 1.75rem !default;
$crow-inner-spacing-small: .75rem !default;
$crow-inner-spacing-scaling: () !default;
$crow-inner-spacing-scaling: map-merge((xs: 1,
        sm: 1,
        md: 1.2,
        lg: 1.4,
        xl: 1.5),
    $crow-inner-spacing-scaling) !default;

// cRow margin
$crow-outer-spacing: 1rem !default;
$crow-outer-spacing-scaling: () !default;
$crow-outer-spacing-scaling: map-merge(("none": 0,
        "extra-small": .8,
        "small": 1,
        "medium": 1.5,
        "large": 2,
        "extra-large": 3),
    $crow-outer-spacing-scaling) !default;

:root {
    --crow-color: var(--bs-body-color);
    --crow-link-color: var(--bs-link-color-rgb);
    --crow-link-hover-color: var(--bs-link-hover-color-rgb);
    --crow-background: #{$white};
    --crow-spacing: #{$crow-inner-spacing};

    @each $breakpoint in map-keys($crow-inner-spacing-scaling) {
        --crow-spacing-#{$breakpoint}: #{$crow-inner-spacing * map-get($crow-inner-spacing-scaling, $breakpoint)};
        --crow-spacing-small-#{$breakpoint}: #{$crow-inner-spacing-small * map-get($crow-inner-spacing-scaling, $breakpoint)};
    }

    --crow-outer-spacing-before: 0;
    --crow-outer-spacing-after: 0;

    @each $variant in map-keys($crow-outer-spacing-scaling) {
        --crow-outer-spacing-variant-#{$variant}: #{$crow-outer-spacing * map-get($crow-outer-spacing-scaling, $variant)};
    }
}

// cType row definitions
.crow {
    position: relative;
    margin-top: var(--crow-outer-spacing-before);
    margin-bottom: var(--crow-outer-spacing-after);
    padding: 0;
    // padding-left: 0;
    // padding-right: 0;
    // padding-top: var(--crow-spacing, $grid-gutter-height);
    // padding-bottom: var(--crow-spacing, $grid-gutter-height);

    @each $breakpoint in map-keys($crow-inner-spacing-scaling) {
        @include media-breakpoint-up($breakpoint) {
            --crow-spacing: var(--crow-spacing-#{$breakpoint});
        }
    }
}

//
// Container
// --------------------------------------------------
.crow-container {
    position: relative;
    @include make-container();

    &-default {

        @each $breakpoint,
        $container-max-width in $container-max-widths {
            @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
                max-width: $container-max-width;
            }
        }
    }

    &-full {
        max-width: 100%;
    }

    &-large {
        max-width: var(--crow-width-large);
    }

    &-medium {
        max-width: var(--crow-width-medium);
    }

    &-small {
        max-width: var(--crow-width-small);
    }
}

.container {

    .crow-container,
    .crow-group-container {
        padding-left: 0;
        padding-right: 0;
    }
}

// cRow indent styles
// .crow-indent {
//     .crow-container {
//         margin-left: 3%;
//         margin-right: 3%;

//         @include media-breakpoint-up(sm) {
//             margin-left: 5%;
//             margin-right: 5%;
//         }

//         @include media-breakpoint-up(md) {
//             margin-left: 10%;
//             margin-right: 10%;
//         }

//         @include media-breakpoint-up(lg) {
//             margin-left: 15%;
//             margin-right: 15%;
//         }
//     }
// }

// Space before and after
// @each $name,
// $scaling in $crow-outer-spacing-scaling {
//     .crow-space-before-#{$name} {
//         --crow-outer-spacing-before: var(--crow-outer-spacing-variant-#{$name});
//     }

//     .crow-space-after-#{$name} {
//         --crow-outer-spacing-after: var(--crow-outer-spacing-variant-#{$name});
//     }
// }


// EXT:container rows background color
.grid-row {
    color: rgb(var(--crow-color));
    background: rgb(var(--crow-background));

    a {
        color: rgb(var(--crow-link-color));

        &:hover {
            color: rgb(var(--crow-link-hover-color));
        }
    }

    &[class*="subset-color-"] {
        padding-left: var(--crow-spacing);
        padding-right: var(--crow-spacing);

        // Add padding when grid rows have a background color
        [data-container-identifier] {
            padding-top: var(--crow-spacing, 2rem);

            // Each content element inside a container grid
            section {
                .crow {
                    padding-top: 0;
                    padding-bottom: 0;
                }
            }
        }
    }

    &:not([class*="subset-color-"]) {
        &:first-of-type {
            .crow-bg-none {
                padding-top: 0;
            }
        }
    }

    >.container {
        padding-left: 0;
        padding-right: 0;
    }
}

//
// Adjustments when a background color is added to a row
// ------------------------------------------------------
.main-content {

    >section {
        +section {
            @include rfs($grid-gutter-height, margin-top);
        }
    }
}