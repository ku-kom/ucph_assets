// cRow padding
$crow-padding: 1rem !default;
$crow-padding-scaling: (xs: 1,
    sm: 1.1,
    md: 1.3,
    lg: 1.5,
    xl: 2,
    xxl: 2.5) !default;

:root {
    --crow-color: var(--bs-body-color);
    --crow-link-color: var(--bs-link-color-rgb);
    --crow-link-hover-color: var(--bs-link-hover-color-rgb);
    --crow-background: #{$white};
    --crow-spacing: #{$crow-padding};

    // Calculate padding based on breakpoint
    @each $breakpoint in map-keys($grid-breakpoints) {
        --crow-spacing-#{$breakpoint}: #{$crow-padding * map-get($crow-padding-scaling, $breakpoint)};
    }

    --crow-outer-spacing-before: 0;
    --crow-outer-spacing-after: 0;
}

// cType row definitions
.crow {
    position: relative;
    // padding-left: 0;
    // padding-right: 0;
    padding-top: var(--crow-spacing, $grid-gutter-height);
    padding-bottom: var(--crow-spacing, $grid-gutter-height);

    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            --crow-spacing: var(--crow-spacing-#{$breakpoint});
        }
    }
}

//
// Container
// --------------------------------------------------
.crow-container {
    position: relative;
    @include make-container();

    &-default {

        @each $breakpoint,
        $container-max-width in $container-max-widths {
            @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
                max-width: $container-max-width;
            }
        }
    }
}

.container {

    .crow-container,
    .crow-group-container {
        padding-left: 0;
        padding-right: 0;
    }
}

// EXT:container rows background color
.grid-row {
    color: rgb(var(--crow-color));
    background: rgb(var(--crow-background));

    a {
        color: rgb(var(--crow-link-color));

        &:hover {
            color: rgb(var(--crow-link-hover-color));
        }
    }

    &[class*="subset-color-"] {
        padding-left: var(--crow-spacing);
        padding-right: var(--crow-spacing);
    }
}

section {
    >.grid-row {
        >.container {
            padding-left: 0;
            padding-right: 0;
        }
    }

    [data-container-identifier] {
        section {

            // Not first
            &:nth-child(n+2) {

                >.crow-bg-none {
                    padding-top: 0;
                }
            }
        }
    }

    // +section {
    //     @include rfs($grid-gutter-height, margin-top);
    // }
}

// .main-content {
//     >section {
//         &:first-of-type {
//             .crow-bg-none {
//                 padding-top: 0;
//             }
//         }
//     }
// }